
The concepts I have learned in this workshop:

Class Variables
	- prefaced with static
	- shared amongst all instances of classes
	- the data is shared amongst all instances of a class, 
      dependant on types (if any) when used with templates 
	- excellent when used to keep count of how many objects, you can define the 
static variable within a constructor, and increment it every time a new object gets 
created (i.e. constructor gets called at creation of object)

Class Functions
	- also prefaced with static
	- used to access static variables in a class
	- independant amongst its respective class

Namespaces
	- to expose everything within a namespace: using namespace XXX;
	- to expose a single element within a namespace: using namespaceName::thingYouWantToExpose;
	- to use class elements within namespaces whenever you need them: namespace::className::thingYouWantTouse;
	- namespaces are used to organize code
	- when working on large projects, it is highly recommended to use namespaces
 to prioritize your variables aren't confused among other similarly named variables and
 to preserve and maintain the integrity of your code" 1- the difference between internal and external linkage using examples from your code
  answer:
 internal linkage refers to everything only in scope of a translation unit while
External linkage refers to things that exist beyond a particular translation unit
.in other words ,accessible through the whole program,whisch is the combination
of all translation units(or object files)

 REFLECTION

1-THE DIFFERENCE BETWEEN INTERNAL LINKAGE AND EXTERNAL LINKAGE

ANSWER: Internal linkage refers to everything only in scope of a translation unit
while External linkage refers to things that exist beyond a particular translation
unit .in other words,accessible through the whole program,which is the combination of all
translation units (objet files)

2-Compilation
	- modularizing code is a good thing
	- declare and define your class in your header file
	- and implement those classes within your .cpp file
	- improves debugging time and keeps your code organized
	- pre-processor creates seperate translation unit by inserting header files and expanding macros,
from each translation unit, compiler creates seperate binary file, then from the binary files
from translation units and the binary files from libraries used in the code,
 the linker makes a file called a "relocatable", this is usually what you execute to start the application

Class & Objects
	- objects are instances of classes
	- classes define the blueprint for the object
	- objects are used to hold, and manipulate data

Types
	- fundamental   -> works directly with the hardware
	- built-in      -> reflect hardware capabilities directly
	- user-defined
		- concrete -> definition/representation known
		- abstract -> definition/representation not known
Scope
	- local -> within a function, like main()
	- class -> begins from { to }; of a class
	- namespace -> everything between the parenthesis of a namespace definition is part of the namespace scope
	- global scope -> pretty much everything above and everything else

Linkage ("<->" means "connects")
	- external -> a scope within a module <-> another scope within a different module
     use keyword "extern"
	- internal -> a scope within a module <-> a scope within the SAME module
use keyword "static" <- (static is a class variable, refer to class variable section above)
